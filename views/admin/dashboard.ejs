<!DOCTYPE html>
<html lang="en">

<head>

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Twitter -->
  <meta name="twitter:site" content="@themepixels">
  <meta name="twitter:creator" content="@themepixels">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="Comtanix CMS">
  <meta name="twitter:description" content="Responsive Bootstrap 4 Dashboard Template">
  <meta name="twitter:image" content="http://themepixels.me/dashforge/img/dashforge-social.png">

  <!-- Facebook -->
  <meta property="og:url" content="http://themepixels.me/dashforge">
  <meta property="og:title" content="Comtanix CMS">

  <meta property="og:image" content="http://themepixels.me/dashforge/img/dashforge-social.png">
  <meta property="og:image:secure_url" content="http://themepixels.me/dashforge/img/dashforge-social.png">
  <meta property="og:image:type" content="image/png">
  <meta property="og:image:width" content="1200">
  <meta property="og:image:height" content="600">

  <!-- Meta -->
  <meta name="description" content="Responsive Bootstrap 4 Dashboard Template">
  <meta name="author" content="ThemePixels">

  <!-- Favicon -->
  <link rel="shortcut icon" type="image/x-icon" href="/assets/img/favicon.png">

  <title>Admin Dashboard | ComtanixCMS</title>

  <!-- vendor css -->
  <!-- <link href="/lib/@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet">
    <link href="/lib/ionicons/css/ionicons.min.css" rel="stylesheet"> -->

  <!-- DashForge CSS -->
  <link rel="stylesheet" href="/assets/css/dashforge.css">

  <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
  <!-- <link rel="stylesheet" href="/assets/css/dashforge.dashboard.css"> -->
  <style>
    /* Add this to your <style> tag or external CSS file */
    .loader-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      /* Dull background */
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }

    .loader {
      text-align: center;
      display: flex;
      flex-direction: column;
      align-items: center;
      position: absolute;
      /* Change position to absolute */
      top: 50%;
      /* Center vertically */
      left: 50%;
      /* Center horizontally */
      transform: translate(-50%, -50%);
      /* Adjust centering */
    }

    .loading-text {
      font-size: 16px;
      color: #ffffff;
      margin-top: 10px;
    }

    /* Center the spinner */
    .spinner-border {
      display: inline-block;
      width: 3rem;
      height: 3rem;
      vertical-align: text-bottom;
      border: 0.25em solid currentColor;
      border-right-color: transparent;
      border-radius: 50%;
      animation: spinner-border 0.75s linear infinite;
    }

    @keyframes spinner-border {
      to {
        transform: rotate(360deg);
      }
    }
  </style>
</head>

<body class="page-profile">

  <%- include('includes/header' , {page : 'dashboard' }) %>

    <div id="loader" class="loader-container">
      <div class="loader">
        <div class="spinner-border text-primary" role="status">
          <span class="sr-only">Loading...</span>
        </div>
        <p class="loading-text">Generating Report... Please wait...</p>
      </div>
    </div>


<!-- loader ended here -->

    <div class="content content-fixed">
      <div class="container pd-x-0 pd-lg-x-10 pd-xl-x-0">
        <div class="d-sm-flex align-items-center justify-content-between mg-b-20 mg-lg-b-25 mg-xl-b-30">
          <div>
            <nav aria-label="breadcrumb">
              <ol class="breadcrumb breadcrumb-style1 mg-b-10">
             
              </ol>
            </nav>
            <h4 style="color: crimson;" class="mg-b-0  tx-spacing--1"><b>Admin>Dashboard</b></h4>
          </div>




          <div class="d-none d-md-block shadow p-2 mb-2 rounded">
            
            <button type="button" id="export-btn" class="btn btn-info btn-sm" data-toggle="modal" data-target="#filterModal">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filter-circle" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                <path d="M7 11.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z"/>
              </svg>
              Filter & Reporting
            </button>
            <button type="button" id="export-btn" class="btn btn-dark btn-sm" data-toggle="modal" data-target="#myModal">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-card-list" viewBox="0 0 16 16">
                <path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z"/>
                <path d="M5 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 5 8zm0-2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0 5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-1-5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zM4 8a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm0 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"/>
              </svg>
              Export Orders
            </button>
          </div>



          <style>
            .d-none.d-md-block {
              display: flex;
              justify-content: space-between;
              align-items: center;
            }

            .d-none.d-md-block label {
              flex: 1;
              margin-right: 10px;
            }

            .d-none.d-md-block input[type="date"] {
              flex: 2;
              padding: 4px;
              margin-right: 9px;
              border-radius: 4px;
              border-color: rgb(158, 158, 158);
            }
          </style>




        </div>

        <div class="row row-xs shadow p-5 mb-5 rounded">


          <div class="col-lg-12 mg-t-10">
            <div class="card">
              <div class="card-header d-flex align-items-start justify-content-between">
                <h6 class="lh-5 mg-b-0">Agents Performance</h6>


              </div><!-- card-header -->
              <div class="card-body pd-y-15 pd-x-10">
                <div class="table-responsive">
                  <table class="table table-borderless table-sm tx-13 tx-nowrap mg-b-0">
                    <thead>
                      <tr class="tx-10 tx-spacing-1 tx-color-03 tx-uppercase">
                        <th class="wd-5p">Link</th>
                        <th>Agent Name</th>
                        <th>Agent Role</th>
                        <th class="text-right">Total Process</th>
                        <th class="text-right">Today Process</th>
                        <th class="text-right">Average Process Time</th>
                        <!-- <th class="text-right">Actions</th> -->
                      </tr>
                    </thead>
                    <tbody>
                      <% for (const item of employeesData) { %>
                        <tr>
                          <td>
                            <%= item?.id %>
                          </td>
                          <td>
                            <%= item?.name %>
                          </td>
                          <td>
                            <%= item?.powers %>
                          </td>
                          <td class="text-right">
                            <%= item?.totalOrders %>
                          </td>
                          <td class="text-right">
                            <%= item?.totalTodayOrders %>
                          </td>
                          <td class="text-right"><b>
                              <%= Math.floor((item?.average)/60/60) %>
                            </b> Hrs <b>
                              <%= ((item?.average % 3600) / 60).toFixed(2) %>
                            </b> Mins</td>
                          <!-- <td class="text-right"><a href="/employee/detail/<%= item.id %>" class="btn btn-primary btn-sm">Detail</a></td> -->
                        </tr>
                        <% } %>
                    </tbody>
                  </table>
                </div>
              </div><!-- card-body -->
            </div><!-- card -->
          </div><!-- col -->
        </div><!-- row -->
      </div><!-- container -->
    </div><!-- content -->


    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="myModalLabel">Export Data</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="exportForm">
              <div class="form-group">
                <label for="fromDate">From Date</label>
                <input type="date" class="form-control" id="fromDate" name="fromDate" required>
              </div>
              <div class="form-group">
                <label for="toDate">To Date</label>
                <input type="date" class="form-control" id="toDate" name="toDate" required>
              </div>
              <div class="form-group">
                
                <label for="employees">Employees</label>
                <select class="form-control select2 parent_filter_select2" id="selectEmp" name="employees[]" multiple="multiple" required>
                  <!-- Add employee options here -->
                 
                  <% for (const item of employeesData) { %>
                    
                    <option value="<%=item.id%>">
                      <%=item.name%>
                    </option>
                    <% } %>
                </select>
                 
              </div>
              <div class="form-group">
                <label for="status">Status</label>
                <select class="form-control select2" name="status[]" multiple="multiple" id="selectStatus">

                  
                  <option value="completed">Completed</option>
                  <option value="cancelled">Cancelled</option>
                  <option value="in-progress">In-Progress</option>
                  <option value="pending">Pending</option>
                </select>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="exportButton">Export</button>
          </div>
        </div>
      </div>
    </div>


    <div class="modal fade" id="filterModal" tabindex="-1" role="dialog" aria-labelledby="filterModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="filterModalLabel">Filter Data</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>







          <div class="modal-body">
            <form id="filterData" action="/admin/new/filter" method="post">
              <div class="form-group">
                <label for="fromDate">From Date</label>
                <input type="date" class="form-control" id="fromDate" name="fromDate" >
              </div>
              <div class="form-group">
                <label for="toDate">To Date</label>
                <input type="date" class="form-control" id="toDate" name="toDate" >
              </div>
              
              <div class="form-group">
                <label for="mfr">Manufaturer</label>
                <input type="text" class="form-control" id="mfr" name="mfr" >
              </div>
              <div class="form-group">
                <label for="disti">Distributor</label>
                <select class="form-control select2" name="disti[]" multiple="multiple" id="disti">
                  <option value="SYTech">SY Tech</option>
                  <option value="SYChoice">SY Choice</option>
                  <option value="IGChoice">IG Choice</option>
                  <option value="IGTech">IG Tech</option>
                  <option value="DHChoice">DH Choice</option>
                  <option value="DHTech">DH Tech</option>
                  <option value="ScansourceChoice">Scansource Choice</option>
                  <option value="ScansourceTech">Scansource Tech</option>
                  <option value="888VoipChoice">888Voip Choice</option>
                  <option value="AsiTech">Asi Tech</option>
                  
                </select>
              </div>
              <div class="form-group">
                <label for="statusfilter">Status</label>
                <select class="form-control select2" name="statusfilter[]" multiple="multiple" id="statusfilter">

                  <option value="all">Select All</option>
                  <option value="completed">Completed</option>
                  <option value="cancelled">Cancelled</option>
                  <option value="in-progress">In-Progress</option>
                  <option value="pending">Pending</option>
                </select>
              </div>
              <div class="form-group">
                
                <label for="employeesfilter">Employees</label>
                <select class="form-control select2" id="employeesfilter" name="employeesfilter[]" multiple="multiple" >
                  <!-- Add employee options here -->
                  <option value="all">Select All</option>
                  <% for (const item of employeesData) { %>
                    
                    <option value="<%=item.id%>">
                      <%=item.name%>
                    </option>
                    <% } %>
                </select>
                 
              </div>
              <div class="form-group">
                <label for="sku">Sku#</label>
                <input type="text" class="form-control" id="sku" name="sku" >
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" >Filter</button>
              </div>
            </form>
          </div>
          
        </div>
      </div>
    </div>
    <script src="/lib/jquery/jquery.min.js"></script>
    <script src="/lib/bootstrap/js/bootstrap.bundle.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <script>
      // Function to parse query parameters from the URL
      function getQueryParameters() {
          var queryString = window.location.search.substring(1);
          var params = {};
          var paramArray = queryString.split('&');
          for (var i = 0; i < paramArray.length; i++) {
              var param = paramArray[i].split('=');
              params[param[0]] = decodeURIComponent(param[1]);
          }
          return params;
      }
    
      // Check if specific query parameters are present
      var queryParams = getQueryParameters();
      console.log(queryParams);
      if (queryParams.filtermodalopen == "true") {
        console.log("modalshouldopen")
          // Open the modal when the specified query parameters are present
          $('#filterModal').modal('show');
      }
    </script>

    <script>
 

  document.getElementById('exportButton').addEventListener('click', function () {
    const form = document.getElementById('exportForm');
        if (form.checkValidity()) {
          $('#myModal').modal('hide');
          $('#loader').show();

      let status = $('#selectStatus').val();
          let formData = {
            fromDate: form.fromDate.value,
            toDate: form.toDate.value,
          employees:$('#selectEmp').val(),
            status: [...status],
          };


      
            

            $.ajax({
              type: 'POST',
              url: '/admin/orders/exports',
              data: formData,
              success: function (response) {
                // Call the downloadCsv function here
                console.log('Export success:', response);
                
              },
              error: function (error) {
                console.error('Export error:', error);
                
              }
            });
          
        }
      });







      //this function is respnsible for the download the exported data of csv 
      //this function will runs when you submit the Modal for exporting data 
      // exportButton it is the id of the Button inside the ExportModal 

      document.getElementById("exportButton").addEventListener("click", function () {
        setTimeout(function () {
          // This code will be executed after 10 seconds
          downloadCsv();
        }, 10000); // 10000 milliseconds = 10 seconds
      });

      function downloadCsv() {
        $.ajax({
          url: '/admin/orders/download',
          method: 'GET',
          xhrFields: {
            responseType: 'blob'
          },
          success: function (data) {
            const blob = new Blob([data], { type: 'text/xlsx' });
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = 'file.xlsx';
            link.click();
          },
          error: function (error) {
            console.error('Error downloading CSV:', error);
          },
        });
        $('#loader').hide();
      }



  //dwonload csv functionality ended here 
</script>
<script>
  $.fn.select2.amd.define('select2/selectAllAdapter', ['select2/utils','select2/dropdown','select2/dropdown/attachBody'], function (Utils, Dropdown, AttachBody) {

function SelectAll() { }
SelectAll.prototype.render = function (decorated) {
    var self = this,
        $rendered = decorated.call(this),
        $selectAll = $(
            '<button class="btn btn-xs btn-default" type="button" style="margin-left:6px;"><i class="fa fa-check-square-o"></i> Select All</button>'
        ),
        $unselectAll = $(
            '<button class="btn btn-xs btn-default" type="button" style="margin-left:6px;"><i class="fa fa-square-o"></i> Unselect All</button>'
        ),
        $btnContainer = $('<div style="margin-top:3px; z-index :900000000000000000000000000000000000000000">').append($selectAll).append($unselectAll);
    if (!this.$element.prop("multiple")) {
        // this isn't a multi-select -> don't add the buttons!
        return $rendered;
    }
    $rendered.find('.select2-dropdown').prepend($btnContainer);
    $selectAll.on('click', function (e) {
      self.$element.find('option').prop("selected", true);

        // Trigger a change event on the select element to reflect the changes
        self.$element.trigger("change");

        // Close the dropdown
        self.trigger('close');
        // var $results = $rendered.find('.select2-results__option[aria-selected=false]');
        // console.log("=============================",$results)
        // $results.each(function () {
        //     self.trigger('select', {
        //         data: $(this).data('data')
        //     });
        // });
        self.trigger('close');
    });
    $unselectAll.on('click', function (e) {
      self.$element.find('option').prop("selected", false);

// Trigger a change event on the select element to reflect the changes
self.$element.trigger("change");

// Close the dropdown
self.trigger('close');
      // $('.select2').select2('destroy').find('option').prop('selected', false).end().select2();
        // var $results = $rendered.find('.select2-results__option[aria-selected=true]');
        // $results.each(function () {
        //     self.trigger('unselect', {
        //         data: $(this).data('data')
        //     });
        // });
        self.trigger('close');
    });
    return $rendered;
};

return Utils.Decorate(
    Utils.Decorate(
        Dropdown,
        AttachBody
    ),
    SelectAll
);

});

$(document).ready(function () {
      $('.select2').select2({
        width: "100%",
        "z-index" : 10000000,
        dropdownAdapter: $.fn.select2.amd.require('select2/selectAllAdapter')
      });
    });

// $('#parent_filter_select2').select2({
//     placeholder: 'Select',
//     dropdownAdapter: $.fn.select2.amd.require('select2/selectAllAdapter')
// });


</script>




</body>

</html>